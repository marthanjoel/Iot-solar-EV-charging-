import tkinter as tk
from tkinter import ttk, messagebox
import random
import time
import threading

# ---- Simulated Sensor Data ----
def simulate_bin_data():
    """Simulate bin fill level and alerts"""
    level = random.randint(0, 100)   # % full
    alert = "OK"
    if level > 80:
        alert = "‚ö†Ô∏è Bin Almost Full"
    if level > 95:
        alert = "üö® Bin Full - Collect Now!"
    return level, alert

# ---- Tkinter GUI ----
class SmartTrashBinApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Smart Trash Bin Dashboard")
        self.root.geometry("500x400")
        self.root.configure(bg="#f0f0f0")

        # Title
        title = tk.Label(root, text="üóëÔ∏è Smart Trash Bin IoT", font=("Arial", 16, "bold"), bg="#f0f0f0")
        title.pack(pady=10)

        # Progress bar (bin level)
        self.level_var = tk.IntVar()
        self.progress = ttk.Progressbar(root, orient="horizontal", length=400, mode="determinate",
                                        maximum=100, variable=self.level_var)
        self.progress.pack(pady=20)

        # Status Label
        self.status_label = tk.Label(root, text="Waiting for data...", font=("Arial", 12), bg="#f0f0f0", fg="blue")
        self.status_label.pack(pady=10)

        # Start Button
        start_btn = tk.Button(root, text="Start Simulation", command=self.start_simulation,
                              bg="#4CAF50", fg="white", font=("Arial", 12, "bold"))
        start_btn.pack(pady=10)

        # Exit Button
        exit_btn = tk.Button(root, text="Exit", command=root.quit,
                             bg="#f44336", fg="white", font=("Arial", 12, "bold"))
        exit_btn.pack(pady=10)

    def update_data(self):
        """Update the UI with simulated data"""
        while True:
            level, alert = simulate_bin_data()
            self.level_var.set(level)
            self.status_label.config(text=f"Level: {level}% | Status: {alert}", fg="red" if "üö®" in alert else "orange" if "‚ö†Ô∏è" in alert else "green")
            time.sleep(2)

    def start_simulation(self):
        """Run simulation in a separate thread"""
        threading.Thread(target=self.update_data, daemon=True).start()

# ---- Main ----
if __name__ == "__main__":
    root = tk.Tk()
    app = SmartTrashBinApp(root)
    root.mainloop()
